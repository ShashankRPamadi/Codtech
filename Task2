import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Common payloads
xss_test_script = "<script>alert('XSS')</script>"
sql_test_payload = "' OR '1'='1"

# Send a GET request and parse the HTML
def get_forms(url):
    try:
        res = requests.get(url)
        soup = BeautifulSoup(res.content, "html.parser")
        return soup.find_all("form")
    except Exception as e:
        print(f"[!] Error fetching forms from {url}: {e}")
        return []

# Extract form details
def get_form_details(form):
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        name = input_tag.attrs.get("name")
        input_type = input_tag.attrs.get("type", "text")
        value = input_tag.attrs.get("value", "")
        if name:
            inputs.append({"name": name, "type": input_type, "value": value})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

# Submit a form with a given payload
def submit_form(form_details, url, payload):
    target_url = urljoin(url, form_details["action"])
    data = {}
    for input in form_details["inputs"]:
        if input["type"] == "text" or input["type"] == "search":
            data[input["name"]] = payload
        else:
            data[input["name"]] = input["value"]
    try:
        if form_details["method"] == "post":
            return requests.post(target_url, data=data)
        else:
            return requests.get(target_url, params=data)
    except Exception as e:
        print(f"[!] Error submitting form to {target_url}: {e}")
        return None

# Scan URL for XSS
def scan_xss(url):
    print(f"\n🔍 Scanning for XSS at {url}")
    forms = get_forms(url)
    for form in forms:
        details = get_form_details(form)
        response = submit_form(details, url, xss_test_script)
        if response and xss_test_script in response.text:
            print(f"[!!] XSS vulnerability found in form at: {url}")
            return
    print("[✓] No XSS vulnerabilities found.")

# Scan URL for SQL Injection
def scan_sql_injection(url):
    print(f"\n🔍 Scanning for SQL Injection at {url}")
    try:
        original = requests.get(url)
        vulnerable = requests.get(url + sql_test_payload)
        if vulnerable.status_code == 200 and vulnerable.text != original.text:
            print(f"[!!] Possible SQL Injection vulnerability detected at: {url}")
        else:
            print("[✓] No SQL Injection vulnerabilities found.")
    except Exception as e:
        print(f"[!] Error testing for SQLi: {e}")

# Main entry
if __name__ == "__main__":
    target = input("🌐 Enter target URL (e.g., http://example.com): ").strip()
    if not target.startswith("http"):
        target = "http://" + target
    scan_xss(target)
    scan_sql_injection(target)
